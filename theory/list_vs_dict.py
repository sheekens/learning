# 7-Card Number

"""Списки (list) в Python:
- Упорядоченная коллекция элементов.
- Элементы списка хранятся последовательно, один за другим.
- Доступ к элементам осуществляется по индексу, который начинается с 0.
- Время доступа к элементу по индексу — O(1).
- Поиск элемента в списке — O(n), так как в худшем случае нужно проверить каждый элемент.
- Сортировка списка с помощью метода list.sort() или функции sorted() имеет временную сложность O(n log n), что является эффективностью алгоритма сортировки Тима (Timsort) в Python.
"""

"""Словари (dict) в Python:

- Неупорядоченная коллекция элементов до Python 3.7, начиная с Python 3.7 словари являются упорядоченными по порядку вставки элементов.
- Состоят из пар ключ-значение.
- Доступ к элементам осуществляется по уникальному ключу, а не по индексу.
- Время доступа к элементу по ключу — O(1) в среднем случае благодаря хэш-таблицам.
- Поиск элемента по ключу также имеет временную сложность O(1) в среднем случае.
- Словари не предназначены для сортировки, но их можно сортировать по ключам или значениям, преобразовав в список, что приведет к временной сложности O(n log n) из-за сортировки.
"""

### Поиск элемента в списке
names = ["Иван", "Ольга", "Сергей", "Алексей"]

name_to_find = "Григорий"
if name_to_find in names:
    print("Имя найдено!")
else:
    print("Имя не найдено.")

### Сортировка списка
numbers = [3, 1, 4, 1, 5, 9, 2, 6]
numbers.sort()
print(numbers)  # Выведет: [1, 1, 2, 3, 4, 5, 6, 9]

### Добавление пары в словарь
users_age = {"Иван": 25, "Ольга": 30}
users_age["Сергей"] = 22
print(users_age)  # Выведет: {'Иван': 25, 'Ольга': 30, 'Сергей': 22}


### Сортировка словаря по значениям:
# У вас есть словарь с именами и возрастами, и вы хотите отсортировать его по возрасту (по значениям).

   
users_age = {"Иван": 25,
            "Ольга": 30,
            "Сергей": 22
}
sorted_ages = sorted(users_age.items(), key=lambda item: item[1])
print(sorted_ages)  # Выведет: [('Сергей', 22), ('Иван', 25), ('Ольга', 30)]

### Сортировка по ключам:
# Дан словарь products с названиями продуктов и их ценами. Отсортируйте словарь по названиям продуктов в алфавитном порядке и выведите результат.
 
products = {'яблоко': 50, 'банан': 30, 'арбуз': 60}

sort_products = sorted(products.items()) 
print(sort_products)

# Сортировка по ключам в обратном порядке:
products = {'яблоко': 50, 'банан': 30, 'арбуз': 60}

sort_products = sorted(products.items(), reverse=True)
print(sort_products)

# Сортировка по длине ключа:
# Дан словарь words с словами и их определениями. Отсортируйте слова по длине слова (по ключам) и выведите отсортированный список слов.
   
words = {'программирование': 'процесс создания программ', 'кот': 'домашнее животное', 'энциклопедия': 'свод знаний'}

sort_words_keys = sorted(words.keys(), key=len, reverse=True) # указываем доп. аргумент-key=len
print(sort_words_keys)

### Сложная сортировка:
# У вас есть словарь items, где ключи — это категории товаров, а значения — это списки словарей, каждый из которых содержит информацию о товаре.
# Отсортируйте товары в каждой категории по цене (по возрастанию), а затем отсортируйте категории по общему количеству всех товаров в категории (по убыванию).

   
items = {
       'фрукты': [{'название': 'яблоко', 'цена': 50}, {'название': 'банан', 'цена': 20}],
       'овощи': [{'название': 'морковь', 'цена': 10}, {'название': 'картофель', 'цена': 15}],
       'напитки': [{'название': 'сок', 'цена': 90}, {'название': 'вода', 'цена': 20}]
       }

